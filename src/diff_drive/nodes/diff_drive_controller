#! /usr/bin/env python
from __future__ import division
import pigpio
import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32

#from diff_drive import controller

class ControllerNode:

    def __init__(self):
        #self.controller = controller.Controller()
        self.linearVelocity = 0.0
        self.angularVelocity = 0.0
        self.pi1=pigpio.pi()
        self.h1=self.pi1.serial_open("/dev/ttyS0",115200)
    def __del__(self):
		self.pi1.serial_close(self.h1)
		self.pi1.stop()
    def main(self):

        rospy.init_node('diff_drive_controller')
        self.nodeName = rospy.get_name()
        rospy.loginfo("{0} started".format(self.nodeName))

        rospy.Subscriber("cmd_vel", Twist, self.twistCallback)

        self.ticksPerMeter = float(rospy.get_param('~ticks_per_meter'))
        self.wheelSeparation = float(rospy.get_param('~wheel_separation'))
        self.maxMotorSpeed = int(rospy.get_param('~max_motor_speed'))
        self.rate = float(rospy.get_param('~rate', 10.0))
        self.timeout = float(rospy.get_param('~timeout', 0.2))

        #self.controller.setWheelSeparation(self.wheelSeparation)
        #self.controller.setTicksPerMeter(self.ticksPerMeter)
        #self.controller.setMaxMotorSpeed(self.maxMotorSpeed)

        rate = rospy.Rate(self.rate)
        self.lastTwistTime = rospy.get_time()
        while not rospy.is_shutdown():
            #self.publish()
            rate.sleep()


    def twistCallback(self, twist):
        self.linearVelocity = twist.linear.x
        self.angularVelocity = twist.angular.z
        self.lastTwistTime = rospy.get_time()
        rospy.loginfo("linear %f angular %f",twist.linear.x,twist.angular.z)
        track=0.52
        left_speed=twist.linear.x-(twist.angular.z*track/2)
        right_speed=twist.linear.x+(twist.angular.z*track/2)
        
        self.pi1.serial_write(self.h1,"v 1 "+str(-left_speed)+"\r")
        self.pi1.serial_write(self.h1,"v 0 "+str(right_speed)+"\r")

if __name__ == '__main__':
    try:
        node = ControllerNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
